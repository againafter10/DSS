set verify off
whenever sqlerror EXIT failure ROLLBACK;

-- SQL variable to hold an error message
variable mesg varchar2(1000)
-- An error flag 
variable fnd_program_error  varchar2(1)
variable fnd_manager_error  varchar2(1)


-- Create the stored procedure

CREATE or replace  PROCEDURE fnd_sleepy  (ERRBUF    OUT VARCHAR2,
                         RETCODE   OUT NUMBER, t in number default 10) is
  i number;
begin
  dbms_lock.sleep(t);

  -- Get a "random" number
  i := mod((23 * fnd_global.conc_request_id) + 
           (43 * to_number(to_char(sysdate, 'SSSSS'))), 100)/99;

  if (i < .07) then -- warning
    errbuf := 'Warning: Code ' || to_char(trunc(i*1000)); 
    retcode := 1;
  elsif (i > .95) then
    errbuf := 'Error: Code ' || to_char(trunc(i*1000)); 
    retcode := 2;
  else
    errbuf := 'Completed successfully.';
    retcode := 0;
  end if;
end;
/



-----------------------
-- Create executable --
-----------------------
prompt Attempting to create executable SLEEPY.

begin 
  :fnd_program_error := 'N';    

  if fnd_program.executable_exists(executable_short_name => 'SLEEPY', 
                                   application => 'FND') 
  then   
      :mesg := 'Executable SLEEPY already exists.';
  else
      fnd_program.executable( 
                  short_name => 'SLEEPY', 
                  executable => 'SLEEPY', 
                  application => 'FND', 
                  description => 'Sleeps for N seconds.', 
                  execution_method => 'PL/SQL Stored Procedure', 
                  execution_file_name => 'fnd_sleepy'); 

      :mesg := 'Executable SLEEPY successfully created.';

  end if;
exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';     

  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/


------------------------
-- Create Programs    --
------------------------
prompt Attempting to create program GLBSR.

begin 
  if fnd_program.program_exists(program => 'GLBSR', 
                                application => 'SQLGL')
  then
      :mesg := 'Program GLBSR already exists.';    
  else
      fnd_program.register( 
                   program => 'Budget Summary Report', 
                   application => 'SQLGL', 
                   enabled => 'Y', 
                   short_name => 'GLBSR', 
                   executable_short_name => 'SLEEPY', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program GLBSR successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 

prompt Attempting to create program GLAAR.

begin 
  if fnd_program.program_exists(program => 'GLAAR', 
                                application => 'SQLGL')
  then
      :mesg := 'Program GLAAR already exists.';    
  else
      fnd_program.register( 
                   program => 'Accounting Analysis Report', 
                   application => 'SQLGL', 
                   enabled => 'Y', 
                   short_name => 'GLAAR', 
                   executable_short_name => 'SLEEPY', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program GLAAR successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 

prompt Attempting to create program GLPL.

begin 
  if fnd_program.program_exists(program => 'GLPL', 
                                application => 'SQLGL')
  then
      :mesg := 'Program GLPL already exists.';    
  else
      fnd_program.register( 
                   program => 'Post Lines', 
                   application => 'SQLGL', 
                   enabled => 'Y', 
                   short_name => 'GLPL', 
                   executable_short_name => 'SLEEPY', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program GLPL successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 

prompt Attempting to create program OEPAO.

begin 
  if fnd_program.program_exists(program => 'OEPAO', 
                                application => 'OE')
  then
      :mesg := 'Program OEPAO already exists.';    
  else
      fnd_program.register( 
                   program => 'Purge and Archive Orders', 
                   application => 'OE', 
                   enabled => 'Y', 
                   short_name => 'OEPAO', 
                   executable_short_name => 'SLEEPY', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program OEPAO successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 

prompt Attempting to create program INVIA.

begin 
  if fnd_program.program_exists(program => 'INVIA', 
                                application => 'INV')
  then
      :mesg := 'Program INVIA already exists.';    
  else
      fnd_program.register( 
                   program => 'Inventory Adjustment', 
                   application => 'INV', 
                   enabled => 'Y', 
                   short_name => 'INVIA', 
                   executable_short_name => 'SLEEPY', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program INVIA successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

prompt Attempting to create program FNDRPR.

begin 
  if fnd_program.program_exists(program => 'FNDRPR', 
                                application => 'FND')
  then
      :mesg := 'Program FNDRPR already exists.';    
  else
      fnd_program.register( 
                   program => 'Resource Planing Report', 
                   application => 'FND', 
                   enabled => 'Y', 
                   short_name => 'FNDRPR', 
                   executable_short_name => 'SLEEPY', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program FNDRPR successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

prompt Attempting to create program PAPS.

begin 
  if fnd_program.program_exists(program => 'PAPS', 
                                application => 'PA')
  then
      :mesg := 'Program PAPS already exists.';    
  else
      fnd_program.register( 
                   program => 'Project Summary', 
                   application => 'PA', 
                   enabled => 'Y', 
                   short_name => 'PAPS', 
                   executable_short_name => 'SLEEPY', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program PAPS successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 


-- Make programs 4 and 5 incompatibile with each other

prompt Making OEPAO incompatible with  INVIA.

begin 
  if fnd_program.incompatibility_exists(program_short_name => 'INVIA', 
                                application => 'INV',
                                inc_prog_short_name => 'OEPAO',
                                inc_prog_application => 'OE'
  )
  then
      :mesg := 'Incopatibility already exists.';    
  else
      fnd_program.incompatibility(program_short_name => 'INVIA', 
                                application => 'INV',
                                inc_prog_short_name => 'OEPAO',
                                inc_prog_application => 'OE');
       
      :mesg := 'Incompatibility successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Make programs 3, 6 and 7 incompatibile with Acitve Users Report

prompt Making GLPL incompatible with  FNDSCARU.

begin 
  if fnd_program.incompatibility_exists(program_short_name => 'GLPL', 
                                application => 'SQLGL',
                                inc_prog_short_name => 'FNDSCARU',
                                inc_prog_application => 'FND'
  )
  then
      :mesg := 'Incopatibility already exists.';    
  else
      fnd_program.incompatibility(program_short_name => 'GLPL', 
                                application => 'SQLGL',
                                inc_prog_short_name => 'FNDSCARU',
                                inc_prog_application => 'FND');
       
      :mesg := 'Incompatibility successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 

prompt Making FNDRPR incompatible with  FNDSCARU.

begin 
  if fnd_program.incompatibility_exists(program_short_name => 'FNDRPR', 
                                application => 'FND',
                                inc_prog_short_name => 'FNDSCARU',
                                inc_prog_application => 'FND'
  )
  then
      :mesg := 'Incopatibility already exists.';    
  else
      fnd_program.incompatibility(program_short_name => 'FNDRPR', 
                                application => 'FND',
                                inc_prog_short_name => 'FNDSCARU',
                                inc_prog_application => 'FND');
       
      :mesg := 'Incompatibility successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 

prompt Making PAPS incompatible with  FNDSCARU.

begin 
  if fnd_program.incompatibility_exists(program_short_name => 'PAPS', 
                                application => 'PA',
                                inc_prog_short_name => 'FNDSCARU',
                                inc_prog_application => 'FND'
  )
  then
      :mesg := 'Incopatibility already exists.';    
  else
      fnd_program.incompatibility(program_short_name => 'PAPS', 
                                application => 'PA',
                                inc_prog_short_name => 'FNDSCARU',
                                inc_prog_application => 'FND');
       
      :mesg := 'Incompatibility successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 

prompt Allow OEPAO on INV

begin
  if (fnd_manager.specialization_exists(manager_short_name=>'INVMGR', 
                                        manager_application=>'INV',
                                        object_type => 'Program',
					object_name => 'OEPAO',
                                        object_application => 'OE'))
  then
    :mesg := 'Specialization exists.';
  else 
    fnd_manager.specialize(manager_short_name=>'INVMGR', 
                           manager_application=>'INV',
                           action => 'Include',
                           object_type => 'Program',
			   object_name => 'OEPAO',
                           object_application => 'OE'); 

    :mesg := 'Specialization created.'; 

  end if;

exception

  when program_error then 
      -- Load the message generated by fnd_manager
      -- so that we can print it to the log.
      :mesg :=  fnd_manager.message;
      :fnd_manager_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_manager_error = 'Y' then 
      raise program_error; 
  end if;
end;
/

prompt Allow INVIA on INV

begin
  if (fnd_manager.specialization_exists(manager_short_name=>'INVMGR', 
                                        manager_application=>'INV',
                                        object_type => 'Program',
					object_name => 'INVIA',
                                        object_application => 'INV'))
  then
    :mesg := 'Specialization exists.';
  else 
    fnd_manager.specialize(manager_short_name=>'INVMGR', 
                           manager_application=>'INV',
                           action => 'Include',
                           object_type => 'Program',
			   object_name => 'INVIA',
                           object_application => 'INV'); 

    :mesg := 'Specialization created.'; 

  end if;

exception

  when program_error then 
      -- Load the message generated by fnd_manager
      -- so that we can print it to the log.
      :mesg :=  fnd_manager.message;
      :fnd_manager_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_manager_error = 'Y' then 
      raise program_error; 
  end if;
end;
/

prompt Allow FNDRPR on MRP

begin
  if (fnd_manager.specialization_exists(manager_short_name=>'MRPMGR', 
                                        manager_application=>'MRP',
                                        object_type => 'Program',
					object_name => 'FNDRPR',
                                        object_application => 'FND'))
  then
    :mesg := 'Specialization exists.';
  else 
    fnd_manager.specialize(manager_short_name=>'MRPMGR', 
                           manager_application=>'MRP',
                           action => 'Include',
                           object_type => 'Program',
			   object_name => 'FNDRPR',
                           object_application => 'FND'); 

    :mesg := 'Specialization created.'; 

  end if;

exception

  when program_error then 
      -- Load the message generated by fnd_manager
      -- so that we can print it to the log.
      :mesg :=  fnd_manager.message;
      :fnd_manager_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_manager_error = 'Y' then 
      raise program_error; 
  end if;
end;
/

prompt Allow PAPS on PA

begin
  if (fnd_manager.specialization_exists(manager_short_name=>'PASMGR', 
                                        manager_application=>'PA',
                                        object_type => 'Program',
					object_name => 'PAPS',
                                        object_application => 'PA'))
  then
    :mesg := 'Specialization exists.';
  else 
    fnd_manager.specialize(manager_short_name=>'PASMGR', 
                           manager_application=>'PA',
                           action => 'Include',
                           object_type => 'Program',
			   object_name => 'PAPS',
                           object_application => 'PA'); 

    :mesg := 'Specialization created.'; 

  end if;

exception

  when program_error then 
      -- Load the message generated by fnd_manager
      -- so that we can print it to the log.
      :mesg :=  fnd_manager.message;
      :fnd_manager_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_manager_error = 'Y' then 
      raise program_error; 
  end if;
end;
/

prompt Disallow OEPAO on STD

begin
  if (fnd_manager.specialization_exists(manager_short_name=>'STANDARD', 
                                        manager_application=>'FND',
                                        object_type => 'Program',
					object_name => 'OEPAO',
                                        object_application => 'OE'))
  then
    :mesg := 'Specialization exists.';
  else 
    fnd_manager.specialize(manager_short_name=>'STANDARD', 
                           manager_application=>'FND',
                           action => 'Exclude',
                           object_type => 'Program',
			   object_name => 'OEPAO',
                           object_application => 'OE'); 

    :mesg := 'Specialization created.'; 

  end if;

exception

  when program_error then 
      -- Load the message generated by fnd_manager
      -- so that we can print it to the log.
      :mesg :=  fnd_manager.message;
      :fnd_manager_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_manager_error = 'Y' then 
      raise program_error; 
  end if;
end;
/

prompt Disallow INVIA on STD

begin
  if (fnd_manager.specialization_exists(manager_short_name=>'STANDARD', 
                                        manager_application=>'FND',
                                        object_type => 'Program',
					object_name => 'INVIA',
                                        object_application => 'INV'))
  then
    :mesg := 'Specialization exists.';
  else 
    fnd_manager.specialize(manager_short_name=>'STANDARD', 
                           manager_application=>'FND',
                           action => 'Exclude',
                           object_type => 'Program',
			   object_name => 'INVIA',
                           object_application => 'INV'); 

    :mesg := 'Specialization created.'; 

  end if;

exception

  when program_error then 
      -- Load the message generated by fnd_manager
      -- so that we can print it to the log.
      :mesg :=  fnd_manager.message;
      :fnd_manager_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_manager_error = 'Y' then 
      raise program_error; 
  end if;
end;
/

prompt Disallow FNDRPR on STD

begin
  if (fnd_manager.specialization_exists(manager_short_name=>'STANDARD', 
                                        manager_application=>'FND',
                                        object_type => 'Program',
					object_name => 'FNDRPR',
                                        object_application => 'FND'))
  then
    :mesg := 'Specialization exists.';
  else 
    fnd_manager.specialize(manager_short_name=>'STANDARD', 
                           manager_application=>'FND',
                           action => 'Exclude',
                           object_type => 'Program',
			   object_name => 'FNDRPR',
                           object_application => 'FND'); 

    :mesg := 'Specialization created.'; 

  end if;

exception

  when program_error then 
      -- Load the message generated by fnd_manager
      -- so that we can print it to the log.
      :mesg :=  fnd_manager.message;
      :fnd_manager_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_manager_error = 'Y' then 
      raise program_error; 
  end if;
end;
/

prompt Disallow PAPS on STD

begin
  if (fnd_manager.specialization_exists(manager_short_name=>'STANDARD', 
                                        manager_application=>'FND',
                                        object_type => 'Program',
					object_name => 'PAPS',
                                        object_application => 'PA'))
  then
    :mesg := 'Specialization exists.';
  else 
    fnd_manager.specialize(manager_short_name=>'STANDARD', 
                           manager_application=>'FND',
                           action => 'Exclude',
                           object_type => 'Program',
			   object_name => 'PAPS',
                           object_application => 'PA'); 

    :mesg := 'Specialization created.'; 

  end if;

exception

  when program_error then 
      -- Load the message generated by fnd_manager
      -- so that we can print it to the log.
      :mesg :=  fnd_manager.message;
      :fnd_manager_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_manager_error = 'Y' then 
      raise program_error; 
  end if;
end;
/


------------------------
-- Create Programs    --
------------------------
prompt Attempting to create program FNDPSR.

begin 
  if fnd_program.program_exists(program => 'FNDPSR', 
                                application => 'FND')
  then
      :mesg := 'Program FNDPSR already exists.';    
  else
      fnd_program.register( 
                   program => 'Program Statistics Report', 
                   application => 'FND', 
                   enabled => 'Y', 
                   short_name => 'FNDPSR', 
                   executable_short_name => 'SLEEPY', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program FNDPSR successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 

prompt Attempting to create program FNDSPS.

begin 
  if fnd_program.program_exists(program => 'FNDSPS', 
                                application => 'FND')
  then
      :mesg := 'Program FNDSPS already exists.';    
  else
      fnd_program.register( 
                   program => 'Summarize Program Statistics', 
                   application => 'FND', 
                   enabled => 'Y', 
                   short_name => 'FNDSPS', 
                   executable_short_name => 'SLEEPY', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program FNDSPS successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 

prompt Attempting to create program FNDPPS.

begin 
  if fnd_program.program_exists(program => 'FNDPPS', 
                                application => 'FND')
  then
      :mesg := 'Program FNDPPS already exists.';    
  else
      fnd_program.register( 
                   program => 'Purge Program Statistics', 
                   application => 'FND', 
                   enabled => 'Y', 
                   short_name => 'FNDPPS', 
                   executable_short_name => 'SLEEPY', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program FNDPPS successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 



-- Make programs 8 and 9 incompatibile with each other

prompt Making FNDPSR incompatible with  FNDSPS.

begin 
  if fnd_program.incompatibility_exists(program_short_name => 'FNDPSR', 
                                application => 'FND',
                                inc_prog_short_name => 'FNDSPS',
                                inc_prog_application => 'FND'
  )
  then
      :mesg := 'Incopatibility already exists.';    
  else
      fnd_program.incompatibility(program_short_name => 'FNDPSR', 
                                application => 'FND',
                                inc_prog_short_name => 'FNDSPS',
                                inc_prog_application => 'FND');
       
      :mesg := 'Incompatibility successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 


-- Make programs 10 and 9 incompatibile with each other

prompt Making FNDPPS incompatible with  FNDSPS.

begin 
  if fnd_program.incompatibility_exists(program_short_name => 'FNDPPS', 
                                application => 'FND',
                                inc_prog_short_name => 'FNDSPS',
                                inc_prog_application => 'FND'
  )
  then
      :mesg := 'Incopatibility already exists.';    
  else
      fnd_program.incompatibility(program_short_name => 'FNDPPS', 
                                application => 'FND',
                                inc_prog_short_name => 'FNDSPS',
                                inc_prog_application => 'FND');
       
      :mesg := 'Incompatibility successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 


-- Make programs 8 and 10 incompatibile with each other

prompt Making FNDPSR incompatible with  FNDPPS.

begin 
  if fnd_program.incompatibility_exists(program_short_name => 'FNDPSR', 
                                application => 'FND',
                                inc_prog_short_name => 'FNDPPS',
                                inc_prog_application => 'FND'
  )
  then
      :mesg := 'Incopatibility already exists.';    
  else
      fnd_program.incompatibility(program_short_name => 'FNDPSR', 
                                application => 'FND',
                                inc_prog_short_name => 'FNDPPS',
                                inc_prog_application => 'FND');
       
      :mesg := 'Incompatibility successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 


Prompt Verify CRM

update fnd_concurrent_queues
   set control_code = 'V'
 where concurrent_queue_id = 4
   and application_id = 0;

-- Create the stored procedure

CREATE or replace  PROCEDURE fnd_amp_demo1  (ERRBUF    OUT VARCHAR2,
                         RETCODE   OUT NUMBER, t in number default 10,
                         max_reqs in number default 5000, 
                         req_time in number default 5) is
  i number;
  req_id number := 0;
begin

  for i in 1..max_reqs loop

    req_id := fnd_request.submit_request('OE', 'OEIP', NULL, 
                                         SYSDATE, FALSE, 
                                         to_char(req_time));

    if (req_id = 0) then
      errbuf := fnd_message.get();
      retcode := 2;
    end if;
    commit;
    dbms_lock.sleep(t);
  end loop;

  errbuf := 'All done';
  retcode := 0;

end;
/

-----------------------
-- Create executable --
-----------------------
prompt Attempting to create executable AMPDEMO.

begin 
  :fnd_program_error := 'N';    

  if fnd_program.executable_exists(executable_short_name => 'AMPDEMO', 
                                   application => 'FND') 
  then   
      :mesg := 'Executable AMPDEMO already exists.';
  else
      fnd_program.executable( 
                  short_name => 'AMPDEMO', 
                  executable => 'AMPDEMO', 
                  application => 'FND', 
                  description => 'Submits requets.', 
                  execution_method => 'PL/SQL Stored Procedure', 
                  execution_file_name => 'fnd_amp_demo1'); 

      :mesg := 'Executable AMPDEMO successfully created.';

  end if;
exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';     

  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/


------------------------
-- Create Programs    --
------------------------
prompt Attempting to create program AMPDEMO.

begin 
  if fnd_program.program_exists(program => 'AMPDEMO', 
                                application => 'OE')
  then
      :mesg := 'Program GLBSR already exists.';    
  else
      fnd_program.register( 
                   program => 'Process Invoices', 
                   application => 'OE', 
                   enabled => 'Y', 
                   short_name => 'AMPDEMO', 
                   executable_short_name => 'AMPDEMO', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program AMPDEMO successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 

prompt Attempting to create program OEIP.

begin 
  if fnd_program.program_exists(program => 'OEIP', 
                                application => 'OE')
  then
      :mesg := 'Program OEIP already exists.';    
  else
      fnd_program.register( 
                   program => 'Invoice Print', 
                   application => 'OE', 
                   enabled => 'Y', 
                   short_name => 'OEIP', 
                   executable_short_name => 'SLEEPY', 
                   executable_application => 'FND', 
                   save_output => 'N', 
                   print => 'N');
       
      :mesg := 'Program OEIP successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_program
      -- so that we can print it to the log.
      :mesg :=  fnd_program.message;
      :fnd_program_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_program_error = 'Y' then 
      raise program_error; 
  end if;
end;
/ 


-----------------------
-- Create Manager    --
-----------------------
prompt Attempting to create manager OVRFMGR.

begin 
  if fnd_manager.manager_exists(manager_short_name => 'OVRFMGR', 
                                application => 'FND')
  then
      :mesg := 'Manager NEWMGR already exists.';    
  else
      fnd_manager.register( 
                        manager => 'Overflow Manager', 
                        application => 'FND',
                        short_name => 'OVRFMGR',
                        description => 'Handles Request Queue Overflows ',
                        type => 'Concurrent Manager',
                        library => 'FNDLIBR',
                        library_application => 'FND'
                        ); 
     

      :mesg := 'Manager OVRFMGR successfully created.';

  end if;

exception 

  when program_error then 
      -- Load the message generated by fnd_manager
      -- so that we can print it to the log.
      :mesg :=  fnd_manager.message;
      :fnd_manager_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 

end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_manager_error = 'Y' then 
      raise program_error; 
  end if;
end;
/

----------------------------------
-- Assign the Standard Workshift -
----------------------------------
begin
  if (fnd_manager.manager_work_shift_exists(manager_short_name=>'OVRFMGR', 
                                            manager_application=>'FND',
                                            work_shift_id=>0))
  then
    :mesg := 'Standard Work shift already assigned to OVRFMGR.';
  else 
    fnd_manager.assign_work_shift(manager_short_name=>'OVRFMGR', 
                                  manager_application=>'FND',
                                  work_shift_id=>0,
                                  processes=>20,
                                  sleep_seconds=>30); 

    :mesg := 'Assigned Standard workshift to OVRFMGR.'; 

  end if;

exception

  when program_error then 
      -- Load the message generated by fnd_manager
      -- so that we can print it to the log.
      :mesg :=  fnd_manager.message;
      :fnd_manager_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_manager_error = 'Y' then 
      raise program_error; 
  end if;
end;
/


prompt Allow OEIP on OVRFMGR

begin
  if (fnd_manager.specialization_exists(manager_short_name=>'OVRFMGR', 
                                        manager_application=>'FND',
                                        object_type => 'Program',
					object_name => 'OEIP',
                                        object_application => 'OE'))
  then
    :mesg := 'Specialization exists.';
  else 
    fnd_manager.specialize(manager_short_name=>'OVRFMGR', 
                           manager_application=>'FND',
                           action => 'Include',
                           object_type => 'Program',
			   object_name => 'OEIP',
                           object_application => 'OE'); 

    :mesg := 'Specialization created.'; 

  end if;

exception

  when program_error then 
      -- Load the message generated by fnd_manager
      -- so that we can print it to the log.
      :mesg :=  fnd_manager.message;
      :fnd_manager_error := 'Y';
     
  when others then 
      -- Re-raise the exception and SQL*Plus 
      -- will print the Oracle error and exit.
      raise; 
end; 
/ 

-- Print the success or error message
print mesg

-- Make SQL*Plus exit with failure if a program_error occurred
begin
  if :fnd_manager_error = 'Y' then 
      raise program_error; 
  end if;
end;
/


commit;
exit success;


